!!ARBvp1.0
PARAM mvp[4] = { state.matrix.mvp };
PARAM proj[4] = { state.matrix.program[1] };

#fromList ["c"]
TEMP r0, r1, r2;
PARAM c[100] = { program.env[0..99] };
OUTPUT oD0 = result.color.primary;
OUTPUT oPos = result.position;
OUTPUT oT0 = result.texcoord[0];
OUTPUT oT1 = result.texcoord[1];
# Constant declarations:
#   -> c[0..3]   -> World x View x Projection matrix
#   -> c[4..7]  -> Texture matrix
#   -> c[8..10] -> World
#   -> c[11] -> spot direction, range
# Vertex data:
#   -> v0 -> position
#   -> v1,2 -> texture coordinates
#   -> v3 -> normal
ATTRIB v0 = vertex.position;
# ** POSITION **
# Transform position to clip space
#dp4 oPos.x, v0, mvp[0]
#dp4 oPos.y, v0, mvp[1]
#dp4 oPos.z, v0, mvp[2]
#dp4 oPos.w, v0, mvp[3]
DP4 r0.x, v0, mvp[0];
DP4 r0.y, v0, mvp[1];
DP4 r0.z, v0, mvp[2];
DP4 r0.w, v0, mvp[3];

MOV oPos, r0;
# ** TEXTURING **
DP4 r1.x, v0, proj[0];
DP4 r1.y, v0, proj[1];
DP4 r1.z, v0, proj[2];
DP4 r1.w, v0, proj[3];

DP4 r2.x, v0, c[12];
DP4 r2.y, v0, c[13];
DP4 r2.z, v0, c[14];
DP4 r2.w, v0, c[15];

MOV oT0, r2;
MOV oD0, r1;
# Fade
# r1 -> vertex position
DP4 r1.x, v0, c[8];
DP4 r1.y, v0, c[9];
DP4 r1.z, v0, c[10];
# r1 -> (light position - vertex position)
SUB r1.xyz, c[11].xyzz, r1.xyzz;
# r2.x -> squared r1 length
#dp3 r2, r1.xyz, r1.xyz
DP3 r2, r1.xzzz, r1.xzzz;
# r2.x -> 1/r1 length
RSQ r2, r2.x;
# r2 -> sqr(r2.x)
RCP r2, r2.x;
MUL oT1.xy, r2.xxxx, c[11].w;
END