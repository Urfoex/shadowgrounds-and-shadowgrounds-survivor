!!ARBvp1.0
PARAM object[4] = { state.matrix.program[0] };
PARAM mvp[4] = { state.matrix.mvp };
PARAM tm2[4] = { state.matrix.texture[2] };
#fromList ["c"]
TEMP r0, r1, r2, r4, r5, r6;
ADDRESS a0;
PARAM c[100] = { program.env[0..99] };
PARAM c1 = {0.0, 0.0, 0.0, 1.0};
OUTPUT oD0 = result.color.primary;
OUTPUT oD1 = result.color.secondary;
OUTPUT oPos = result.position;
OUTPUT oT0 = result.texcoord[0];
OUTPUT oT2 = result.texcoord[2];
# Shader with bone deforming (1 weight):
#   -> Transform vertex/normals
#   -> Apply ambient color
#   -> Apply surface color
#   -> Apply directional light
#   -> Apply base texturing 
# Constant declarations:
#   -> c[0..3] -> World x View x Projection matrix
#   -> c[4..7] -> World matrix (first 3 rows)   
#   -> c[7]    -> Ambient color (.w transparency)
#   -> c[8]    -> Diffuse color
#   -> c[8]    -> Diffuse color
#   -> c[9]    -> Light position (.w 0.f for clamping)
#   -> c[10]   -> Light color
#   -> c[12..] -> Bone matrices (3 rows each)
# Vertex data:
#   -> v0 -> position
#   -> v1,2 -> texture coordinates
#   -> v3 -> normal
#   -> v6 -> index 1 / weight 1 (x,y) & index 2 / weight 2 (z,w)
ATTRIB v0 = vertex.position;
ATTRIB v3 = vertex.normal;
ATTRIB v1 = vertex.texcoord[0];
ATTRIB v2 = vertex.texcoord[1];
ATTRIB v6 = vertex.texcoord[2];
ATTRIB v7 = vertex.texcoord[3];
# ** Bone 1 **
# Set index
ARL a0.x, v6.x;
# Transform position
DP4 r0.x, v0, c[a0.x + 0];
DP4 r0.y, v0, c[a0.x + 1];
DP4 r0.z, v0, c[a0.x + 2];
#mov r0.w, v0.w
# Bone 2
MUL r0.xyz, r0.xyzz, v6.y;
ARL a0.x, v7.x;
DP4 r1.x, v0, c[a0.x + 0];
DP4 r1.y, v0, c[a0.x + 1];
DP4 r1.z, v0, c[a0.x + 2];
MAD r0.xyz, r1.xyzz, v7.y, r0.xyzz;
MOV r0.w, v0.w;
# For random (!= 1) weights
SUB r4.x, r0.w, v6.y;
SUB r4.x, r4.xxxx, v7.y;
MAD r0.xyz, v0.xyzz, r4.xxxx, r0.xyzz;
# Transform to clip space
DP4 r6.x, r0, mvp[0];
DP4 r6.y, r0, mvp[1];
DP4 r6.z, r0, mvp[2];
DP4 r6.w, r0, mvp[3];

MOV oPos, r6;
# ** LIGHT **
ARL a0.x, v6.x;
# r0 -> vertex normal
DP3 r2.x, v3, c[a0.x + 0];
DP3 r2.y, v3, c[a0.x + 1];
DP3 r2.z, v3, c[a0.x + 2];
DP3 r5.x, r2, object[0];
DP3 r5.y, r2, object[1];
DP3 r5.z, r2, object[2];
# r1 -> vertex position
DP4 r1.x, v0, object[0];
DP4 r1.y, v0, object[1];
DP4 r1.z, v0, object[2];
# r1 -> (light position - vertex position)
SUB r1.xyz, c[9].xyzz, r1.xyzz;
# r2.x -> squared r1 length
DP3 r2.x, r1.xyzz, r1.xyzz;
# r2.x -> 1/r1 length
RSQ r2, r2.x;
# r1 -> normalized (light position - vertex position)
MUL r1, r1.xyzz, r2.xxxx;
# normalize
# r0 vertex normal dot r1
DP3 r0.x, r5.xyzz, r1.xyzz;
MAX r0.x, r0.xxxx, c[9].w;
MUL r0, r0.xxxx, c[10];
MIN r0, r0, v0.w;
# Directional (sun)
DP3 r1.x, r5.xyzz, c[11].xyzz;
MAX r1.x, r1.xxxx, c[9].w;
ADD r0.xyz, r0.xyzz, r1.xxxx;
# Add ambient color and multiply with material color
#add r2.xyz, c[7].xyz, r0.xyz
#mul oD0.xyz, r2.xyz, c[8].xyz
ADD r2, c[7], r0;
MUL oD0.xyz, r2, c[8];
MOV oD0.w, c[7].w;
MOV oD1, c[8];

# Texturing
ADD oT0.xy, v1.xyyy, c[12].xyyy;
# oh ffs...
# opengl spec says unspecified texture coordinates must be padded with 0, 0, 0, 1
# some mac and ati drivers seem to think this is optional...
MOV oT0.zw, c1.zwww;

# Fake position
DP4 r0.x, r6, tm2[0];
DP4 r0.y, r6, tm2[1];
DP4 r0.z, r6, tm2[2];
DP4 r0.w, r6, tm2[3];

MOV oT2, r0;
END