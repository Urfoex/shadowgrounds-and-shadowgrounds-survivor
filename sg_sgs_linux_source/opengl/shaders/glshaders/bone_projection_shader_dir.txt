!!ARBvp1.0
PARAM object[4] = { state.matrix.program[0] };
PARAM lightProjSpace[4] = { state.matrix.program[2] };
PARAM proj[4] = { state.matrix.program[1] };
PARAM mvp[4] = { state.matrix.mvp };
#fromList ["c"]
TEMP r0, r1, r2, r4;
ADDRESS a0;
PARAM c[100] = { program.env[0..99] };
OUTPUT oD0 = result.color.primary;
OUTPUT oPos = result.position;
OUTPUT oT0 = result.texcoord[0];
OUTPUT oT1 = result.texcoord[1];
OUTPUT oT2 = result.texcoord[2];
OUTPUT oT3 = result.texcoord[3];
# Shader with bone deforming (1 weight):
#   -> Transform vertex/normals
#   -> Apply ambient color
#   -> Apply surface color
#   -> Apply directional light
#   -> Apply base texturing 
# Constant declarations:
#   -> c[0..3] -> World x View x Projection matrix
#   -> c[4..7] -> Texture tm
#   -> c[8..10] -> World
#   -> c[11] -> spot direction, range
#   -> c[12..] -> Bone matrices (3 rows each)
#      -> First one is identity
# Vertex data:
#   -> v0 -> position
#   -> v1,2 -> texture coordinates
#   -> v3 -> normal
#   -> v6 -> index 1 / weight 1 (x,y) & index 2 / weight 2 (z,w)
ATTRIB v0 = vertex.position;
ATTRIB v3 = vertex.normal;
ATTRIB v1 = vertex.texcoord[0];
ATTRIB v2 = vertex.texcoord[1];
ATTRIB v6 = vertex.texcoord[2];
ATTRIB v7 = vertex.texcoord[3];
# ** Bone 1 **
# Set index
ARL a0.x, v6.x;
# Transform position
DP4 r0.x, v0, c[a0.x + 0];
DP4 r0.y, v0, c[a0.x + 1];
DP4 r0.z, v0, c[a0.x + 2];
#mov r0.w, v0.w
# Bone 2
MUL r0.xyz, r0.xyzz, v6.y;
ARL a0.x, v7.x;
DP4 r1.x, v0, c[a0.x + 0];
DP4 r1.y, v0, c[a0.x + 1];
DP4 r1.z, v0, c[a0.x + 2];
MAD r0.xyz, r1.xyzz, v7.y, r0.xyzz;
MOV r0.w, v0.w;
# For random (!= 1) weights
SUB r4.x, r0.w, v6.y;
SUB r4.x, r4.xxxx, v7.y;
MAD r0.xyz, v0.xyzz, r4.xxxx, r0.xyzz;
# Transform to clip space
DP4 oPos.x, r0, mvp[0];
DP4 oPos.y, r0, mvp[1];
DP4 oPos.z, r0, mvp[2];
DP4 oPos.w, r0, mvp[3];

# ** TEXTURING **
# Move texture coordinates

#OLD
#DP4 r1.x, r0, object[0];
#DP4 r1.y, r0, object[1];
#DP4 r1.z, r0, object[2];
#DP4 r1.w, r0, c[7];
#DP4 r2.x, r0, c[12];
#DP4 r2.y, r0, c[13];
#DP4 r2.z, r0, c[14];
#DP4 r2.w, r0, c[15];
#MOV oT0, r1;
#MOV oT1, r2;
#end of OLD


DP4 r1.x, r0, proj[0];
DP4 r1.y, r0, proj[1];
DP4 r1.z, r0, proj[2];
DP4 r1.w, r0, proj[3];
MOV oT1, r1;

DP4 r1.x, r0, lightProjSpace[0];
DP4 r1.y, r0, lightProjSpace[1];
DP4 r1.z, r0, lightProjSpace[2];
DP4 r1.w, r0, lightProjSpace[3];
MOV oT0, r1;


ADD oT2.xy, v1, c[16];
# Spot depth
MUL r1.z, r1.zzzz, c[11].w;
MOV oT3.xy, r1.zzzz;
# Dot product
ARL a0.x, v6.x;
DP3 r2.x, v3, c[a0.x + 0];
DP3 r2.y, v3, c[a0.x + 1];
DP3 r2.z, v3, c[a0.x + 2];
DP3 r0.x, r2, object[0];
DP3 r0.y, r2, object[1];
DP3 r0.z, r2, object[2];
DP3 r1.x, r0.xyzz, c[11].xyzz;
MAX r1.x, r1.xxxx, c[11].w;
#mul oD0, r1.x, c[17]
MUL oD0.xyz, r1.xxxx, c[17];
MOV oD0.w, c[17].w;
END