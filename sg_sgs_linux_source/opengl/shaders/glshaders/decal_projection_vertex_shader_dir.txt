!!ARBvp1.0
PARAM object[4] = { state.matrix.program[0] };
PARAM lightProjSpace[4] = { state.matrix.program[2] };
PARAM proj[4] = { state.matrix.program[1] };
PARAM mvp[4] = { state.matrix.mvp };
#fromList ["c"]
TEMP r0, r1, r2;
PARAM c[100] = { program.env[0..99] };
OUTPUT oD0 = result.color.primary;
OUTPUT oPos = result.position;
OUTPUT oT0 = result.texcoord[0];
OUTPUT oT1 = result.texcoord[1];
OUTPUT oT2 = result.texcoord[2];
OUTPUT oT3 = result.texcoord[3];
OUTPUT oT4 = result.texcoord[4];
# Depth shader for ATi shadowing:
#   -> Transform vertex
#   -> Pass TC0
#   -> Output depth to TC1
# Constant declarations:
#   -> c[0..3] -> World x View x Projection matrix
#   -> c[4..7] -> Spot matrix
#   -> c[8..10] -> World
#   -> c[11] -> spot direction, range
# Vertex data:
#   -> v0 -> position
#   -> v1,2 -> texture coordinates
#   -> v3 -> normal
ATTRIB v0 = vertex.position;
ATTRIB v3 = vertex.normal;
ATTRIB v1 = vertex.texcoord[0];
ATTRIB v2 = vertex.texcoord[1];
ATTRIB v5 = vertex.color.primary;
# ** POSITION **
# Transform position to clip space
DP4 r0.x, v0, mvp[0];
DP4 r0.y, v0, mvp[1];
DP4 r0.z, v0, mvp[2];
DP4 r0.w, v0, mvp[3];

MOV oPos, r0;

# To spots space
#OLD
#DP4 r1.x, v0, object[0];
#DP4 r1.y, v0, object[1];
#DP4 r1.z, v0, object[2];
#DP4 r1.w, v0, c[7];

#MUL r1.z, r1.zzzz, c[11].w;
#DP4 r2.x, v0, c[12];
#DP4 r2.y, v0, c[13];
#DP4 r2.z, v0, c[14];
#DP4 r2.w, v0, c[15];

#MUL r2.z, r2.zzzz, c[11].w;
#MOV oT0, r1;
#MOV oT1, r2;
#end of OLD


DP4 r1.x, v0, proj[0];
DP4 r1.y, v0, proj[1];
DP4 r1.z, v0, proj[2];
DP4 r1.w, v0, proj[3];
MOV oT1, r1;

DP4 r1.x, v0, lightProjSpace[0];
DP4 r1.y, v0, lightProjSpace[1];
DP4 r1.z, v0, lightProjSpace[2];
DP4 r1.w, v0, lightProjSpace[3];
MOV oT0, r1;


MOV oT2, v1;
MOV oT3, r1.zwww;
MOV oT4, r1.zzzz;
MOV r0, v3;
DP3 r1.x, r0.xyzz, c[11].xyzz;
MAX r1.x, r1.xxxx, c[11].w;
MUL oD0.xyz, r1.xxxx, c[17];
MOV oD0.w, v5;
END