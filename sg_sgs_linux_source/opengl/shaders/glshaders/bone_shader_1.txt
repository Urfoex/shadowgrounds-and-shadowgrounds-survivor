!!ARBvp1.0
PARAM object[4] = { state.matrix.program[0] };
PARAM mvp[4] = { state.matrix.mvp };
#fromList ["c"]
TEMP r0, r1, r2, r4, r7;
ADDRESS a0;
PARAM c[100] = { program.env[0..99] };
OUTPUT oD0 = result.color.primary;
OUTPUT oPos = result.position;
OUTPUT oT0 = result.texcoord[0];
OUTPUT oT1 = result.texcoord[1];
# Shader with bone deforming (1 weight):
#   -> Transform vertex/normals
#   -> Apply ambient color
#   -> Apply surface color
#   -> Apply directional light
#   -> Apply base texturing 
# Constant declarations:
#   -> c[0..3] -> World x View x Projection matrix
#   -> c[4..7] -> World matrix (first 3 rows)   
#   -> c[7]    -> Ambient color (.w transparency)
#   -> c[8]    -> Diffuse color
#   -> c[9]    -> Light direction (.w 0.f for clamping)
#   -> c[10]   -> Light color
#   -> c[19]   -> Fog
# Vertex data:
#   -> v0 -> position
#   -> v1,2 -> texture coordinates
#   -> v3 -> normal
#   -> v6 -> index 1 / weight 1 (x,y) & index 2 / weight 2 (z,w)
ATTRIB v0 = vertex.position;
ATTRIB v3 = vertex.normal;
ATTRIB v1 = vertex.texcoord[0];
ATTRIB v2 = vertex.texcoord[1];
ATTRIB v6 = vertex.texcoord[2];
ATTRIB v7 = vertex.texcoord[3];
# ** Bone 1 **
# Set index
ARL a0.x, v6.x;
# Transform position
DP4 r0.x, v0, c[a0.x + 0];
DP4 r0.y, v0, c[a0.x + 1];
DP4 r0.z, v0, c[a0.x + 2];
#mov r0.w, v0.w
# Bone 2
MUL r0.xyz, r0.xyzz, v6.y;
ARL a0.x, v7.x;
DP4 r1.x, v0, c[a0.x + 0];
DP4 r1.y, v0, c[a0.x + 1];
DP4 r1.z, v0, c[a0.x + 2];
MAD r0.xyz, r1.xyzz, v7.y, r0.xyzz;
MOV r0.w, v0.w;
# For random (!= 1) weights
SUB r4.x, r0.w, v6.y;
SUB r4.x, r4.xxxx, v7.y;
MAD r0.xyz, v0.xyzz, r4.xxxx, r0.xyzz;
# Transform to clip space
DP4 oPos.x, r0, mvp[0];
DP4 oPos.y, r0, mvp[1];
DP4 oPos.z, r0, mvp[2];
DP4 oPos.w, r0, mvp[3];

# ** DIRECTIONAL LIGHT **
# Dot with light vector (diffuse intensity)
#dp3 r1.x, r1.xyz, c[9].xyz
# Clamp
#max r1.x, r1.x, c[9].w
# * light_color
#mul r2.xyz, r1.x, c[10].xyz
# Add ambient color and multiply with material color
MOV r2.xyz, c[7].xyzz;
MUL r2.xyz, r2.xyzz, c[8].xyzz;
MOV oD0.w, c[7].w;
# Height fog
DP4 r7.x, r0, object[0];
DP4 r7.y, r0, object[1];
DP4 r7.z, r0, object[2];
SUB r0, r7.y, c[19].x;
MUL r0, r0.xxxx, c[19].y;
MIN r0, r0, c[19].w;
MAX r0, r0, c[19].z;
MUL oD0.xyz, r0.xxxx, r2;
# Texturing
#mov oT0.xy, v1.xy
ADD oT0.xy, v1.xyyy, c[12].xyyy;
MOV oT1.xy, v2.xyyy;
# ** Fog **
# - fog start
#add r1.x, r4.x, -c[11].x
# 1 / range
#rcp r1.y, c[11].z
# 1.0 - (z - fog start) * 1/range
#mad oFog.x, -r1.x, r1.y, c[11].w
END