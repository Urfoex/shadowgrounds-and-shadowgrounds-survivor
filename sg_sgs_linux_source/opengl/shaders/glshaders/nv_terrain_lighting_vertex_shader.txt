!!ARBvp1.0
PARAM mvp[4] = { state.matrix.mvp };
PARAM tm3[4] = { state.matrix.texture[3] };
PARAM tm2[4] = { state.matrix.texture[2] };
#fromList ["c"]
TEMP r0, r1, r2;
PARAM c[100] = { program.env[0..99] };
OUTPUT oD0 = result.color.primary;
OUTPUT oFog = result.fogcoord;
OUTPUT oPos = result.position;
OUTPUT oT0 = result.texcoord[0];
OUTPUT oT2 = result.texcoord[2];
OUTPUT oT3 = result.texcoord[3];
# Default shader:
#   -> Transform vertex
#   -> Apply ambient color
#   -> Apply surface color
#   -> Apply directional light
#   -> Apply base texturing 
# Light direction could be transformed to 
# model space and avoid rotating normal.
# Constant declarations:
#   -> c[0..3] -> World x View x Projection matrix
#   -> c[4..7] -> World matrix (first 3 rows)   
#   -> c[7]    -> Ambient color (.w transparency)
#   -> c[8]    -> Diffuse color
#   -> c[9]    -> Light direction (.w 0.f for clamping)
#   -> c[10]   -> Light color
#   -> c[25]   -> Fog
# Vertex data:
#   -> v0 -> position
#   -> v3 -> normal
#   -> v7,v8,v9 -> texture coordinates
ATTRIB v0 = vertex.position;
ATTRIB v3 = vertex.normal;
ATTRIB v7 = vertex.texcoord[0];
ATTRIB v8 = vertex.texcoord[1];
ATTRIB v9 = vertex.texcoord[2];
# Position
DP4 r0.x, v0, mvp[0];
DP4 r0.y, v0, mvp[1];
DP4 r0.z, v0, mvp[2];
DP4 r0.w, v0, mvp[3];

MOV oPos, r0;
DP3 r1.x, v3.xyzz, c[11].xyzz;
MAX r1.x, r1.xxxx, c[9].w;
ADD r2.xyz, c[7].xyzz, r1.xxxx;
MUL oD0, r2.xyzz, c[8].xyzz;

MOV oT0, v7;

DP4 r1.x, r0, tm2[0];
DP4 r1.y, r0, tm2[1];
DP4 r1.z, r0, tm2[2];
DP4 r1.w, r0, tm2[3];
MOV oT2, r1;

DP4 r1.x, r0, tm3[0];
DP4 r1.y, r0, tm3[1];
DP4 r1.z, r0, tm3[2];
DP4 r1.w, r0, tm3[3];
MOV oT3, r1;

# Height fog
SUB r0, v0.y, c[25].x;
MUL oFog, r0.xxxx, c[25].y;
END