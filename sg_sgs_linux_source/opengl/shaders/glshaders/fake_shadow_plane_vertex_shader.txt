!!ARBvp1.0
PARAM mvp[4] = { state.matrix.mvp };
PARAM proj[4] = { state.matrix.program[1] };
#fromList ["c"]
TEMP r0, r1;
PARAM c[100] = { program.env[0..99] };
OUTPUT oD0 = result.color.primary;
OUTPUT oPos = result.position;
OUTPUT oT0 = result.texcoord[0];
OUTPUT oT1 = result.texcoord[1];
OUTPUT oT2 = result.texcoord[2];
OUTPUT oT3 = result.texcoord[3];
# Constant declarations:
#   -> c[0..3]   -> World x View x Projection matrix
#   -> c[4..7]  -> Texture matrix
#   -> c[8..10] -> World
#   -> c[11] -> spot direction, range
# Vertex data:
#   -> v0 -> position
ATTRIB v0 = vertex.position;
ATTRIB v1 = vertex.color;
# ** POSITION **
# Transform position to clip space
#dp4 oPos.x, v0, mvp[0]
#dp4 oPos.y, v0, mvp[1]
#dp4 oPos.z, v0, mvp[2]
#dp4 oPos.w, v0, mvp[3]
DP4 r0.x, v0, mvp[0];
DP4 r0.y, v0, mvp[1];
DP4 r0.z, v0, mvp[2];
DP4 r0.w, v0, mvp[3];

MOV oPos, r0;
# ** TEXTURING **
DP4 r1.x, v0, proj[0];
DP4 r1.y, v0, proj[1];
DP4 r1.z, v0, proj[2];
DP4 r1.w, v0, proj[3];

#mov oT0, r1
#mov oT1, r1
#mov oT2, r1
#mov oT3, r1
ADD oT0, r1, c[5];
ADD oT1, r1, c[6];
ADD oT2, r1, c[7];
ADD oT3, r1, c[8];
MOV oD0, v1.xyzw;
END
